---
import { type CollectionEntry, getCollection, getEntry } from "astro:content";
import Post from "../../../layouts/Post.astro"; // Path confirmed
import { useTranslations } from "../../../i18n/utils"; // Path confirmed

export async function getStaticPaths() {
    const allEntries = await getCollection("projects"); // Changed to 'projects'
    const paths = allEntries.map((entry) => {
        const [langFromFile, ...slugParts] = entry.slug.split("/");
        const actualSlug = slugParts.join("/");
        return {
            // Params now include 'lang'
            params: { lang: langFromFile, slug: actualSlug },
            // Props still pass the entry, as per instructions
            // (though the component script below will re-fetch)
            props: { entry },
        };
    });
    return paths;
}

// Component Script
const { lang, slug } = Astro.params;

if (!lang || !slug) {
    return Astro.redirect("/404");
}

const collectionSlug = `${lang}/${slug}`;
// Re-fetch the entry based on lang and slug from params
const entry = await getEntry("projects", collectionSlug); // Changed to 'projects'

if (!entry) {
    return Astro.redirect("/404");
}

// Initialize translations using the lang from params
const t = useTranslations(lang as keyof typeof import("../../../i18n/ui").ui);
// The above 't' is not used in the template for this file, but is part of the instructions.
// It would be used if there were text in this file itself needing translation.

const { Content } = await entry.render();
---

<Post {...entry.data} lang={lang}>
    {/* Pass lang from Astro.params to Layout */}
    <Content />
</Post>
